Неизменяемые данные в Python представляют собой
 объекты которые нельзя изменить после их создания.
  То есть любые операции, которые
   изменяют значение неизменяемого объекта,
    на самом деле создают новый объект.
     Неизменяемые типы данных в Python включают:

1. - Целые числа (`int`),
   - Числа с плавающей запятой (`float`),
   - Комплексные числа (`complex`) являются неизменяемыми.

Например, если вы измените значение переменной,
  которая ссылается на целое число, вы фактически создаете новый объект.

   ```python
   x = 5
   x = x + 1  -  здесь x указывает на новый объект
   ```

2. Строки (`str`) в Python также являются неизменяемыми.
 Любая операция, которая кажется изменяющей строку,
  создает новую строку.

   ```python
   s = "hello"
   s = s + " world"  # создает новую строку "hello world"
   ```

3. Кортежи: Кортежи (`tuple`) являются коллекцией элементов и являются неизменяемыми.
 После создания кортежа вы не можете добавлять, удалять или изменять элементы.

   ```python
   t = (1, 2, 3)
   # t[0] = 10  # вызывает ошибку TypeError
   ```

4. frozenset: Это неизменяемая версия множества (`set`).
 В `frozenset` вы не можете добавлять или удалять элементы после его создания.

   ```python
   fs = frozenset([1, 2, 3])
   # fs.add(4)  # вызывает ошибку AttributeError
   ```

5. bytes: Как и строки, `bytes` являются неизменяемыми последовательностями байтов.

   ```python
   b = b"hello"
   # b[0] = b'A'  # вызывает ошибку TypeError
   ```

Причины использования неизменяемых данных:

1. Безопасность: Неизменяемые объекты могут быть безопаснее в многопоточных приложениях, так как они гарантированно не изменятся, если несколько потоков пытаются использовать один и тот же объект.

2. Хэшируемость: Неизменяемые объекты могут использоваться в качестве ключей в словарях и элементах множеств, так как их значение не изменяется. Для этого объекты должны быть хэшируемыми, т.е. у них должен быть определён метод `__hash__()`.

3. Производительность: Неизменяемые объекты могут быть оптимизированы во время выполнения, чтобы уменьшить использование памяти и повысить производительность.
